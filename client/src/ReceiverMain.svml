{
    import { MainData, PageData } from './Types'
    import { Input } from './Components'
    import { SpecialsListView } from './Specials'
    import { CastReceiver } from './CastReceiver'


    import * as smoothscroll from './lib/smoothscroll'
    smoothscroll.polyfill();
}


EventHub
    @{
        isAdminMode: boolean = false;
    }
    toggleAdminMode() {
        this.isAdminMode = !this.isAdminMode;
        this.emit('isAdminModeChanged', this.isAdminMode);
    }
    init() {
        document.addEventListener('keypress', e => {
			if(e.keyCode === 94) { // 94 = '^'
				this.toggleAdminMode();
			}
		});
    }

MainView<MainData>[row]
    @{ 
        selectedPage: PageData;
        isInited: boolean = false;
    }
    .style { 
        position: absolute;
		padding: 2em;
        left: 0; top: 0; right: 0; bottom: 0;
        color: #FFF;
        background-color: #000;
    }
    /*
    #pageList:PageList[row-nofill] $data.pages
        onSelected(page: PageData) {
            this.selectedPage = page;
            this.editor.update(page);
        }
    */
    #editor:PageEditor[row-fill]
    init() {
        //let receiver = new CastReceiver();
        //receiver.start();
    }
    render() { 
        if(!this.data.pages) this.data.set('pages', {});
        if(this.selectedPage) this.selectedPage = this.data.pages[this.selectedPage.key];
        if(!this.isInited) {
            this.isInited = true;
            let pages = SyncUtils.toArray(this.data.pages);
            if(pages.length > 0) this.selectedPage = pages[0];
        }
        this.editor.update(this.selectedPage);
    }

PageList[row-nofill]
    @{
        isClosed: boolean = false;
    }
    .style {
        border-right: 1px solid #BBB;
        width: 200px;
        padding: 0 1em;
        box-sizing: border-box;
        position: relative;
        overflow: hidden;
    }
    #hideDrawer:button '<'
        .style { position: absolute; top: 0; right: 0; }
        onClick() {
            this.isClosed = !this.isClosed;
            this.el.style.width = this.isClosed ? '50px' : '200px';
            this.hideDrawer.innerHTML = this.isClosed ? '>' : '<';
        }
    #title:h1 'Pages32'
    #addBtn:button 'Add Page' 
        .style { width: 100%; }
        onClick() {
            let page = {
                title: 'New Page',
                specials: {},
                wines: {},
                cocktails: {},
                drafts: {},
                bottles: {}
            } as PageData;
            this.data.setItem(page)
        }
    #itemList:SyncList({ item: PageItem }) $data
        .style { width: 100%; margin-top: 1em; }
        onSelected(view: PageItem, page: PageData) { this.emit('selected', page); }

PageItem
    .style { 
        width: 100%; 
        border: 1px solid #DDD;
        }
    #title:span $data.title
    onClick() { 
        this.emit('selected', this.data)
    }

PageEditorControls[row]
    #title:Input({ twoway: true, label: 'Title', key: 'title' })[row-nofill] $data
        .style { width: 350px; }
    #fill[row-fill]
    #delBtn:button[row-nofill] 'Delete Page' onClick() { 
        if(confirm('Delete page?')) {
            this.data.parent.remove(this.data.key); 
        }
    }

PageEditor<PageData>[row-fill col]
    .style {
        padding: 1em;
    }
//    #controls:PageEditorControls[col-nofill] $data
//        .style { padding-bottom: 1em; }
    #cols:PageEditorColumns[col-fill] $data
    render() {
        if(this.data) this.show();
        else this.hide();
    }

PageEditorColumns[row]
    #specialsList:SpecialsListView({title: 'Specials'})[row-fill] $data.specials
        .style { min-width: 200px; margin-right: 2em; }
    #draftsList:SpecialsListView({title: 'Drafts'})[row-fill] $data.drafts
        .style { min-width: 200px; margin-right: 2em; }
    #winesList:SpecialsListView({title: 'Wines'})[row-fill] $data.wines
        .style { min-width: 200px; margin-right: 2em; }
    #cocktailsList:SpecialsListView({title: 'Cocktails'})[row-fill] $data.cocktails
        .style { min-width: 200px; margin-right: 2em; }
    init() {
        eventHub.on('isAdminModeChanged', (isAdminMode) => {
            this.specialsList.updateAdminMode(isAdminMode);
            this.draftsList.updateAdminMode(isAdminMode);
            this.winesList.updateAdminMode(isAdminMode);
            this.cocktailsList.updateAdminMode(isAdminMode);
        });
    }

{
    let eventHub = new EventHub();
    eventHub.init();
    let app = new SyncApp<SyncData>(new MainView());
    app.start();
    new SyncReloader().start();
}
